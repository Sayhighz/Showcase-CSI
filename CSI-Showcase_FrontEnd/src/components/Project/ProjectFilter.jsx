import React, { useState, useEffect } from 'react';
import { Form, Select, Button, Space, Typography, Card, Row, Col, Input, Tooltip } from 'antd';
import { FilterOutlined, ReloadOutlined, SearchOutlined, InfoCircleOutlined } from '@ant-design/icons';
import { PROJECT_TYPES } from '../../constants/projectTypes';

const { Option } = Select;
const { Title } = Typography;

/**
 * ProjectFilter component ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πà‡∏≤‡∏á‡πÜ
 * 
 * @param {Object} props - Props ‡∏Ç‡∏≠‡∏á component
 * @param {Array} props.projectTypes - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 * @param {Array} props.projectYears - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 * @param {Array} props.studyYears - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 * @param {Object} props.initialValues - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
 * @param {Function} props.onFilterChange - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
 * @param {Function} props.onSearch - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 * @param {Function} props.onReset - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
 * @param {boolean} props.loading - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {boolean} props.showSearch - ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {string} props.layout - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ('inline', 'horizontal', 'vertical')
 * @returns {JSX.Element} ProjectFilter component
 */
const ProjectFilter = ({
  projectTypes = PROJECT_TYPES,
  projectYears = [],
  studyYears = [],
  initialValues = {},
  onFilterChange,
  onSearch,
  onReset,
  loading = false,
  showSearch = true,
  layout = 'horizontal'
}) => {
  const [form] = Form.useForm();
  const [expanded, setExpanded] = useState(false);
  const [searchKeyword, setSearchKeyword] = useState(initialValues.keyword || '');
  const [currentFilters, setCurrentFilters] = useState(initialValues);

  // Debug log
  console.log('ProjectFilter rendered with initialValues:', initialValues);
  console.log('studyYears provided:', studyYears);

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ initialValues ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  useEffect(() => {
    console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤:', initialValues);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ searchKeyword
    setSearchKeyword(initialValues.keyword || '');
    setCurrentFilters(initialValues);
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö category/type
    let categoryValue = null;
    if (initialValues.category !== undefined) {
      categoryValue = initialValues.category;
    } else if (initialValues.type !== undefined) {
      categoryValue = initialValues.type;
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö level/studyYear - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    let levelValue = null;
    if (initialValues.level !== undefined) {
      levelValue = initialValues.level;
    } else if (initialValues.studyYear !== undefined) {
      levelValue = initialValues.studyYear;
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏° - ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á level ‡πÅ‡∏•‡∏∞ studyYear ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà API ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    form.setFieldsValue({
      type: categoryValue,
      category: categoryValue,
      year: initialValues.year || null,
      level: levelValue,
      studyYear: levelValue,
      keyword: initialValues.keyword || ''
    });
    
    console.log('Form values after reset:', form.getFieldsValue());
  }, [form, initialValues]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleFilterChange = (changedValues, allValues) => {
    console.log('üîç ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:', changedValues);
    console.log('üîç ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°:', allValues);
    
    if (!onFilterChange) return;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const filters = { ...currentFilters };
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö category/type - ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏™‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå
    if ('type' in changedValues) {
      filters.category = changedValues.type;
      filters.type = changedValues.type;
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå category ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      form.setFieldValue('category', changedValues.type);
    } else if ('category' in changedValues) {
      filters.category = changedValues.category;
      filters.type = changedValues.category;
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå type ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      form.setFieldValue('type', changedValues.category);
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö level/studyYear - ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏™‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå
    if ('studyYear' in changedValues) {
      filters.level = changedValues.studyYear;
      filters.studyYear = changedValues.studyYear;
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå level ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      form.setFieldValue('level', changedValues.studyYear);
    } else if ('level' in changedValues) {
      filters.level = changedValues.level;
      filters.studyYear = changedValues.level;
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå studyYear ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
      form.setFieldValue('studyYear', changedValues.level);
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö year
    if ('year' in changedValues) {
      filters.year = changedValues.year;
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
    setCurrentFilters(filters);
    
    console.log('üîç ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á onFilterChange:', filters);
    onFilterChange(filters);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const handleSearch = () => {
    if (loading) return;
    
    const values = form.getFieldsValue();
    console.log('Search with form values:', values);
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà API ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const filters = { ...currentFilters };
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö category/type
    if (values.type) {
      filters.category = values.type;
      filters.type = values.type;
    } else if (values.category) {
      filters.category = values.category;
      filters.type = values.category;
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö level/studyYear
    if (values.studyYear) {
      filters.level = values.studyYear;
      filters.studyYear = values.studyYear;
    } else if (values.level) {
      filters.level = values.level;
      filters.studyYear = values.level;
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö year ‡πÅ‡∏•‡∏∞ keyword
    if (values.year) {
      filters.year = values.year;
    }
    
    filters.keyword = searchKeyword;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
    setCurrentFilters(filters);
    
    console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤:', filters);
    
    if (onSearch) {
      onSearch(filters);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
  const handleReset = () => {
    if (loading) return;
    
    form.resetFields();
    setSearchKeyword('');
    
    const resetFilters = {
      category: null,
      type: null,
      year: null,
      level: null,
      studyYear: null,
      keyword: ''
    };
    
    setCurrentFilters(resetFilters);
    
    if (onReset) {
      onReset();
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
  const yearOptions = projectYears.length > 0 
    ? projectYears.map(year => (
        <Option key={year} value={year}>{year}</Option>
      ))
    : Array.from({ length: 5 }, (_, i) => {
        const year = new Date().getFullYear() - i;
        return <Option key={year} value={year}>{year}</Option>;
      });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
  const studyYearOptions = studyYears.length > 0
    ? studyYears.map(year => (
        <Option key={year} value={year}>‡∏õ‡∏µ {year}</Option>
      ))
    : [1, 2, 3, 4].map(year => (
        <Option key={year} value={year}>‡∏õ‡∏µ {year}</Option>
      ));

  // Layout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
  const getFormLayout = () => {
    switch (layout) {
      case 'inline':
        return {
          layout: 'inline',
          labelCol: undefined,
          wrapperCol: undefined
        };
      case 'vertical':
        return {
          layout: 'vertical',
          labelCol: undefined,
          wrapperCol: undefined
        };
      case 'horizontal':
      default:
        return {
          layout: 'horizontal',
          labelCol: { span: 8 },
          wrapperCol: { span: 16 }
        };
    }
  };

  return (
    <Card className="project-filter-card" bordered={false} style={{ boxShadow: '0 2px 8px rgba(0,0,0,0.05)' }}>
      <Title level={4} style={{ marginBottom: 16, display: 'flex', alignItems: 'center' }}>
        <FilterOutlined style={{ marginRight: 8, color: '#1890ff' }} /> 
        ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        <Tooltip title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£">
          <InfoCircleOutlined style={{ marginLeft: 8, color: '#999', fontSize: 16 }} />
        </Tooltip>
      </Title>
      
      {showSearch && (
        <Input.Search
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
          allowClear
          enterButton={<SearchOutlined />}
          size="large"
          loading={loading}
          value={searchKeyword}
          onChange={(e) => setSearchKeyword(e.target.value)}
          onSearch={() => handleSearch()}
          style={{ marginBottom: 16 }}
        />
      )}
      
      <Form
        form={form}
        {...getFormLayout()}
        onValuesChange={handleFilterChange}
        className="project-filter-form"
      >
        <Row gutter={[16, 16]}>
          <Col xs={24} sm={expanded ? 12 : 24} md={expanded ? 8 : 12} lg={expanded ? 6 : 8}>
            <Form.Item
              name="type"
              label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
              labelCol={layout === 'horizontal' ? { span: 8 } : undefined}
              wrapperCol={layout === 'horizontal' ? { span: 16 } : undefined}
            >
              <Select
                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
                allowClear
                loading={loading}
                showSearch
                optionFilterProp="children"
                className="custom-select"
                disabled={loading}
              >
                {projectTypes.map(type => (
                  <Option key={type.value} value={type.value}>
                    {type.emoji} {type.label}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          
          <Col xs={24} sm={expanded ? 12 : 24} md={expanded ? 8 : 12} lg={expanded ? 6 : 8}>
            <Form.Item
              name="year"
              label="‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
              labelCol={layout === 'horizontal' ? { span: 8 } : undefined}
              wrapperCol={layout === 'horizontal' ? { span: 16 } : undefined}
            >
              <Select
                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
                allowClear
                loading={loading}
                showSearch
                optionFilterProp="children"
                className="custom-select"
                disabled={loading}
              >
                {yearOptions}
              </Select>
            </Form.Item>
          </Col>
          
          {expanded && (
            <Col xs={24} sm={12} md={8} lg={6}>
              <Form.Item
                name="studyYear"
                label="‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á"
                labelCol={layout === 'horizontal' ? { span: 8 } : undefined}
                wrapperCol={layout === 'horizontal' ? { span: 16 } : undefined}
              >
                <Select
                  placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á"
                  allowClear
                  loading={loading}
                  className="custom-select"
                  disabled={loading}
                >
                  {studyYearOptions}
                </Select>
              </Form.Item>
            </Col>
          )}

        </Row>
        
        <div style={{ marginTop: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Button
            type="link"
            onClick={() => setExpanded(!expanded)}
            style={{ padding: 0 }}
          >
            {expanded ? '‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°' : '‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'}
          </Button>
          
          <Space>
            <Button
              icon={<ReloadOutlined />}
              onClick={handleReset}
              disabled={loading}
            >
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </Button>
            <Button
              type="primary"
              icon={<FilterOutlined />}
              onClick={handleSearch}
              loading={loading}
            >
              ‡∏Å‡∏£‡∏≠‡∏á
            </Button>
          </Space>
        </div>

        {/* Hidden form fields to maintain state compatibility with both naming conventions */}
        <Form.Item name="category" hidden={true}>
          <Input />
        </Form.Item>
        <Form.Item name="level" hidden={true}>
          <Input />
        </Form.Item>
      </Form>
    </Card>
  );
};

export default ProjectFilter;