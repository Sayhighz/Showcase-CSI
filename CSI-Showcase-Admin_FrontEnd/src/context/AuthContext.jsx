import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from 'react';
import { message } from 'antd';
import { jwtDecode } from 'jwt-decode';
import { setAdminAuthCookie, getAdminAuthCookie, removeAdminAuthCookie } from '../lib/cookie';
import { adminLogin, verifyAdminToken } from '../services/authService';

// Create Auth Context
const AuthContext = createContext(null);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const isTokenExpired = (token) => {
    if (!token) return true;
    
    try {
        const decoded = jwtDecode(token);
        const currentTime = Date.now() / 1000;
        const isExpired = decoded.exp < currentTime;
        
        if (isExpired) {
            console.log("Token is expired! Current time:", currentTime, "Expiry time:", decoded.exp);
        }
        
        return isExpired;
    } catch (error) {
        console.error("Error checking token expiry:", error);
        return true;
    }
};

export const AuthProvider = ({ children }) => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [admin, setAdmin] = useState({
        id: null,
        username: '',
        role: '',
        avatar: null
    });
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° userInfoRef ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô token
    const userInfoRef = useRef({
        username: '',
        avatar: null
    });
    
    // ‡πÉ‡∏ä‡πâ Ref ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    const authInProgressRef = useRef(false);
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token
    const setUserFromToken = useCallback((token) => {
        try {
            if (!token) return false;
            
            const decodedToken = jwtDecode(token);
            console.log("Decoded token in setUserFromToken:", decodedToken);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á token
            if (isTokenExpired(token)) {
                console.log("Token expired when setting user");
                return false;
            }
            
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å userInfoRef ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô login
            const savedUserInfo = userInfoRef.current;
            console.log("Saved user info:", savedUserInfo);
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å userInfoRef ‡∏Å‡πà‡∏≠‡∏ô
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å token
            setAdmin({
                id: decodedToken.id || decodedToken.userId || null,
                // ‡πÉ‡∏ä‡πâ username ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô login ‡∏Å‡πà‡∏≠‡∏ô
                username: savedUserInfo.username || 
                         decodedToken.user?.fullName || 
                         decodedToken.fullName || 
                         decodedToken.username || 
                         decodedToken.name || 
                         '',
                role: decodedToken.role,
                // ‡πÉ‡∏ä‡πâ avatar ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô login ‡∏Å‡πà‡∏≠‡∏ô
                avatar: savedUserInfo.avatar || 
                       decodedToken.user?.image || 
                       decodedToken.image || 
                       decodedToken.user?.avatar || 
                       decodedToken.avatar || 
                       null
            });
            
            setIsAuthenticated(true);
            
            console.log("User set from token:", {
                id: decodedToken.id || decodedToken.userId || null,
                username: savedUserInfo.username || decodedToken.username || '',
                role: decodedToken.role,
                avatar: savedUserInfo.avatar || null
            });
            
            return true;
        } catch (error) {
            console.error("Error setting user from token:", error);
            return false;
        }
    }, []);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏≠‡∏û - ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    useEffect(() => {
        console.log("üöÄ Initial auth check on app load");
        
        const initialAuthCheck = async () => {
            // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
            if (authInProgressRef.current) {
                console.log("Auth check already in progress, skipping");
                return;
            }
            
            authInProgressRef.current = true;
            setIsLoading(true);
            
            try {
                const token = getAdminAuthCookie();
                console.log("Token from cookie:", token ? "exists" : "not found");
                
                if (!token) {
                    console.log("No token found, setting unauthenticated");
                    setIsAuthenticated(false);
                    return;
                }
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (isTokenExpired(token)) {
                    console.log("Token is expired, removing");
                    removeAdminAuthCookie();
                    setIsAuthenticated(false);
                    return;
                }
                
                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                const success = setUserFromToken(token);
                
                if (success) {
                    console.log("Successfully authenticated from token");
                } else {
                    console.log("Failed to authenticate from token");
                    removeAdminAuthCookie();
                    setIsAuthenticated(false);
                }
            } catch (error) {
                console.error("Initial auth check error:", error);
                setIsAuthenticated(false);
            } finally {
                setIsLoading(false);
                authInProgressRef.current = false;
            }
        };
        
        initialAuthCheck();
    }, [setUserFromToken]);
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    const handleLogin = useCallback(async (username, password) => {
        console.log("Login attempt for:", username);
        setIsLoading(true);
        
        try {
            const response = await adminLogin(username, password);
            console.log("Login response:", response);
            
            if (response.success && response.data && response.data.token) {
                const token = response.data.token;
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                const decodedToken = jwtDecode(token);
                console.log("Decoded token:", decodedToken);
                
                if (decodedToken.role !== 'admin') {
                    message.error('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•');
                    setIsLoading(false);
                    return false;
                }
                
                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ token ‡πÉ‡∏ô cookie (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏ß‡∏±‡∏ô)
                setAdminAuthCookie(token, 7);
                
                // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ username ‡πÅ‡∏•‡∏∞ avatar ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
                const userFullName = response.data.user?.fullName || 
                                     response.data.user?.username || 
                                     decodedToken.user?.fullName || 
                                     decodedToken.fullName || 
                                     decodedToken.username || 
                                     decodedToken.name || 
                                     username || '';
                
                const userAvatar = response.data.user?.image || 
                                  response.data.user?.avatar || 
                                  decodedToken.user?.image || 
                                  decodedToken.image || 
                                  decodedToken.avatar || 
                                  null;
                
                // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• username ‡πÅ‡∏•‡∏∞ avatar ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô userInfoRef
                // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ refresh
                userInfoRef.current = {
                    username: userFullName,
                    avatar: userAvatar
                };
                console.log("Saved user info to ref:", userInfoRef.current);
                
                // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•
                setAdmin({
                    id: decodedToken.id || decodedToken.userId || null,
                    username: userFullName,
                    role: decodedToken.role,
                    avatar: userAvatar
                });
                
                setIsAuthenticated(true);
                message.success('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                
                console.log("User set after login:", {
                    id: decodedToken.id || decodedToken.userId || null,
                    username: userFullName,
                    role: decodedToken.role,
                    avatar: userAvatar
                });
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô localStorage
                try {
                    localStorage.setItem('admin_user_info', JSON.stringify({
                        username: userFullName,
                        avatar: userAvatar
                    }));
                    console.log("User info saved to localStorage");
                } catch (storageError) {
                    console.error("Could not save to localStorage:", storageError);
                }
                
                return true;
            } else {
                message.error(response.message || '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
                return false;
            }
        } catch (error) {
            console.error('Login error:', error);
            message.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
            return false;
        } finally {
            setIsLoading(false);
        }
    }, []);
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    const handleLogout = useCallback(() => {
        console.log("Logging out");
        
        // ‡∏•‡∏ö token ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        removeAdminAuthCookie();
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï userInfoRef
        userInfoRef.current = {
            username: '',
            avatar: null
        };
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
        try {
            localStorage.removeItem('admin_user_info');
        } catch (error) {
            console.error("Error removing from localStorage:", error);
        }
        
        setIsAuthenticated(false);
        setAdmin({
            id: null,
            username: '',
            role: '',
            avatar: null
        });
        
        message.success('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        
        // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ redirect
        setTimeout(() => {
            window.location.href = '/login';
        }, 100);
    }, []);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    useEffect(() => {
        try {
            const savedUserInfo = localStorage.getItem('admin_user_info');
            if (savedUserInfo) {
                const parsedInfo = JSON.parse(savedUserInfo);
                userInfoRef.current = parsedInfo;
                console.log("Loaded saved user info from localStorage:", parsedInfo);
            }
        } catch (error) {
            console.error("Error loading from localStorage:", error);
        }
    }, []);
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏ã‡πâ‡∏≥)
    const refreshAuth = useCallback(async () => {
        console.log("Manual refresh auth requested");
        
        if (authInProgressRef.current) {
            console.log("Auth refresh already in progress");
            return isAuthenticated;
        }
        
        authInProgressRef.current = true;
        
        try {
            const token = getAdminAuthCookie();
            
            if (!token) {
                console.log("No token found during refresh");
                setIsAuthenticated(false);
                return false;
            }
            
            if (isTokenExpired(token)) {
                console.log("Token expired during refresh");
                removeAdminAuthCookie();
                setIsAuthenticated(false);
                return false;
            }
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö backend ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
            if (!isAuthenticated) {
                return setUserFromToken(token);
            }
            
            return true;
        } catch (error) {
            console.error("Refresh auth error:", error);
            return isAuthenticated; // ‡∏Ñ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        } finally {
            authInProgressRef.current = false;
        }
    }, [isAuthenticated, setUserFromToken]);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á context value ‡∏ó‡∏µ‡πà‡∏°‡∏µ performance ‡∏î‡∏µ
    const contextValue = React.useMemo(() => ({
        isAuthenticated,
        isLoading,
        admin,
        login: handleLogin,
        logout: handleLogout,
        refreshAuth
    }), [isAuthenticated, isLoading, admin, handleLogin, handleLogout, refreshAuth]);
    
    return (
        <AuthContext.Provider value={contextValue}>
            {children}
        </AuthContext.Provider>
    );
};

// Custom hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ context
export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

export default AuthContext;